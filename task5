import numpy as np, random

# Distance matrix (ride times between 5 cities)
dist = np.array([[0, 2, 9,10,7],
                 [1, 0, 6, 4,3],
                 [15,7, 0, 8,3],
                 [6, 3,12, 0,11],
                 [9, 7, 5, 6,0]])

n, ants, iters = 5, 5, 30
alpha, beta, evap, Q = 1, 2, 0.5, 100
pher = np.ones((n,n))

def length(t): return sum(dist[t[i]-1][t[i+1]-1] for i in range(len(t)-1))

best, best_len, all_routes = None, 1e9, []
for _ in range(iters):
    routes=[]
    for _ in range(ants):
        tour=[random.randint(1,n)]
        while len(tour)<n:
            i=tour[-1]-1; prob=[]
            for j in range(n):
                if j+1 not in tour: prob.append((pher[i][j]**alpha)*((1/dist[i][j])**beta))
                else: prob.append(0)
            prob=np.array(prob)/sum(prob)
            tour.append(np.random.choice(range(1,n+1),p=prob))
        tour.append(tour[0]); routes.append(tour)
        L=length(tour)
        if L<best_len: best,best_len=tour,L
    all_routes=routes; pher*=(1-evap)
    for t in routes:
        L=length(t)
        for i in range(len(t)-1): pher[t[i]-1][t[i+1]-1]+=Q/L

print("Route of all ants at the end:")
for r in all_routes: print(r)
print("\nBest path:", best)
print("Cost of the best path=", best_len)
